/* leaflet-pip.js - Point in polygon for Leaflet */
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.leafletPip=e()}}(function(){return function(){function r(e,n,t){function o(i,s){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!s&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r}()({1:[function(require,module,exports){function getLls(l){for(var lls=l.getLatLngs(),i=0;i<lls.length;i++)isFlat(lls[i])?(lls[i]=lls[i],i=i):(lls.splice(i,1),lls=lls.concat(getLls(L.polygon(lls[i]))),i--);return lls}function isFlat(l){return Array.isArray(l)&&"number"==typeof l[0]!=1&&"object"!=typeof l[0][0]}var pointInPolygon=require("@turf/boolean-point-in-polygon").default,helpers=require("@turf/helpers");module.exports=function(map,latlng,vertices){if(vertices=vertices||!1,!latlng)return[];var layers=[],results=[];return map.eachLayer(function(layer){layer instanceof L.Polygon&&layers.push(layer)}),layers.forEach(function(layer){var lls=getLls(layer);if(vertices){var inside=pointInPolygon(helpers.point([latlng.lng,latlng.lat]),helpers.polygon([lls.map(function(ll){return[ll.lng,ll.lat]})]));inside&&results.push(layer)}else for(var inside=!1,j=0,k=lls.length-1;j<lls.length;k=j++){var xi=lls[j].lng,yi=lls[j].lat,xj=lls[k].lng,yj=lls[k].lat,intersect=yi>latlng.lat!=yj>latlng.lat&&latlng.lng<(xj-xi)*(latlng.lat-yi)/(yj-yi)+xi;intersect&&(inside=!inside)}inside&&results.push(layer)}),results},module.exports.bassackwards=function(latLngs,p){return L.polygon(latLngs).contains(p)};var leafletPip=module.exports;leafletPip.version="1.1.0",leafletPip.pointInLayer=module.exports},{"@turf/boolean-point-in-polygon":2,"@turf/helpers":3}],2:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var helpers_1=require("@turf/helpers"),invariant_1=require("@turf/invariant");function booleanPointInPolygon(point,polygon,options){void 0===options&&(options={});var pt=invariant_1.getCoord(point),polys=invariant_1.getGeom(polygon).coordinates;if(!polys.length)throw new Error("polygon must contain coordinates");if(polygon.type!==helpers_1.POLYGON&&polygon.type!==helpers_1.MULTI_POLYGON)throw new Error("polygon must be a Polygon or MultiPolygon");var type=polygon.type===helpers_1.POLYGON?helpers_1.POLYGON:helpers_1.MULTI_POLYGON,bbox=options.ignoreBoundary?options.bbox:null,onBoundary=!1,inPoly=!1;if(bbox&&inBBox(pt,bbox))return!0;switch(type){case helpers_1.POLYGON:var closedCoords,currentP,inHole,k=0,isInside=!1;for(inHole=!1,k=0;k<polys.length;k++)closedCoords=polys[k][0],0!==k&&(inHole=!inHole),currentP=isPointInPolygon(pt,closedCoords,options.ignoreBoundary),2===currentP&&(onBoundary=!0),inHole?-1===currentP&&(isInside=!isInside):1===currentP&&(isInside=!isInside);return!(!isInside&&!options.ignoreBoundary&&onBoundary);case helpers_1.MULTI_POLYGON:for(var q=0;q<polys.length;q++){closedCoords=polys[q][0];for(var isInside=!1,inHole=!1,k=0;k<polys[q].length;k++)closedCoords=polys[q][k],0!==k&&(inHole=!inHole),currentP=isPointInPolygon(pt,closedCoords,options.ignoreBoundary),2===currentP&&(onBoundary=!0),inHole?-1===currentP&&(isInside=!isInside):1===currentP&&(isInside=!isInside);if(isInside||-1===onBoundary&!!options.ignoreBoundary)return!0}return!1}}function inBBox(pt,bbox){return bbox[0]<=pt[0]&&bbox[1]<=pt[1]&&bbox[2]>=pt[0]&&bbox[3]>=pt[1]}function isPointInPolygon(pt,poly,ignoreBoundary){var i,j,k,isInside,intersect,xi,yi,xj,yj,xk,yk,jk,len=poly.length,isInside=!1;if(len<=0)return!1;for(i=0,j=len-1;i<len;j=i++){xi=poly[i][0],yi=poly[i][1],xj=poly[j][0],yj=poly[j][1];var onBoundary=(pt[1]*xi-pt[0]*yi)-(pt[1]*xj-pt[0]*yj)+(yi*xj-xi*yj);if(0===onBoundary)return ignoreBoundary?!1:!0;intersect=yi>pt[1]!=yj>pt[1]&&pt[0]<(xj-xi)*(pt[1]-yi)/(yj-yi)+xi,intersect&&(isInside=!isInside)}return isInside?1:-1}exports.default=booleanPointInPolygon},{"@turf/helpers":3,"@turf/invariant":4}],3:[function(require,module,exports){"use strict";function cacheDistance(coordinates){if(coordinates.length>2){return Math.sqrt(Math.pow(coordinates[0][0]-coordinates[1][0],2)+Math.pow(coordinates[0][1]-coordinates[1][1],2))}return-1}function getCoord(obj){if(!obj)throw new Error("obj is required");if(obj.length&&Array.isArray(obj[0])&&"object"==typeof obj[0][0])return obj[0][0];if(obj.length)return obj;obj||(obj={});var lng=obj.lng?obj.lng:obj.lon,lat=obj.lat;if(lng&&lat)return[lng,lat];throw new Error("No valid coordinates")}function point(coordinates,properties,options){if(!coordinates)throw new Error("No coordinates passed");if(coordinates.length>4)throw new Error("Only 2-4 coordinates supported");if("object"!=typeof coordinates[0])coordinates=coordinates.map(function(i){return i});if("number"!=typeof coordinates[0]||"number"!=typeof coordinates[1])throw new Error("Coordinates must be numbers");return{type:"Feature",geometry:{type:"Point",coordinates:coordinates},properties:properties||{}}}Object.defineProperty(exports,"__esModule",{value:!0});var EARTH_RADIUS=6371008.8,UNITS=["meters","kilometres","kilometers","millimetres","millimeters","centimetres","centimeters","miles","yards","feet","inches","degrees","radians","hectares","acres","squareMeters","squareKilometres","squareKilometers","squareMiles","squareYards","squareFeet","squareInches","squareCentimeters","squareCentimetres","squareMillimeters","squareMillimetres"],AREA_UNITS=["acres","hectares","squareMeters","squareKilometres","squareKilometers","squareMiles","squareYards","squareFeet","squareInches","squareCentimeters","squareCentimetres","squareMillimeters","squareMillimetres"],LENGTH_UNITS=["meters","kilometres","kilometers","millimetres","millimeters","centimetres","centimeters","miles","yards","feet","inches"],DEGREES2RADIANS=Math.PI/180,RADIANS2DEGREES=180/Math.PI,FEATURES="FeatureCollection",FEATURE="Feature",POINT="Point",LINESTRING="LineString",MULTI_LINESTRING="MultiLineString",POLYGON="Polygon",MULTI_POLYGON="MultiPolygon",GEOMETRY_COLLECTION="GeometryCollection",TYPES=exports.TYPES=["Point","LineString","Polygon","MultiPoint","MultiLineString","MultiPolygon"];exports.earthRadius=EARTH_RADIUS,exports.cacheDistance=cacheDistance,exports.getCoord=getCoord,exports.featureCollection=function(features,bbox,id){var fc={type:FEATURES,features:features};return bbox&&(fc.bbox=bbox),id&&(fc.id=id),fc},exports.isNumber=function(num){return!isNaN(num)&&null!==num&&!Array.isArray(num)},exports.isObject=function(input){return!!input&&input.constructor===Object},exports.point=point,exports.lineString=function(coords,properties,options){if(!coords)throw new Error("No coordinates passed");if(coords.length<2)throw new Error("Coordinates must be an array of two or more positions");for(var err,i=0;i<coords.length;i++){var point=coords[i];if("number"!=typeof point[0]||"number"!=typeof point[1])throw new Error("Coordinates must contain numbers")}return{type:"Feature",geometry:{type:"LineString",coordinates:coords},properties:properties||{}}},exports.bbox=function(geojson){var bbox=geojson.bbox;if(!bbox){var i,postaction=function(){bbox=[Infinity,Infinity,-Infinity,-Infinity],coordEach(geojson,function(coord){bbox[0]>coord[0]&&(bbox[0]=coord[0]),bbox[1]>coord[1]&&(bbox[1]=coord[1]),bbox[2]<coord[0]&&(bbox[2]=coord[0]),bbox[3]<coord[1]&&(bbox[3]=coord[1])})};switch(geojson.type){case"Point":bbox=[geojson.coordinates[0],geojson.coordinates[1],geojson.coordinates[0],geojson.coordinates[1]];break;case"LineString":case"MultiPoint":for(bbox=[Infinity,Infinity,-Infinity,-Infinity],i=0;i<geojson.coordinates.length;i++)bbox[0]>geojson.coordinates[i][0]&&(bbox[0]=geojson.coordinates[i][0]),bbox[1]>geojson.coordinates[i][1]&&(bbox[1]=geojson.coordinates[i][1]),bbox[2]<geojson.coordinates[i][0]&&(bbox[2]=geojson.coordinates[i][0]),bbox[3]<geojson.coordinates[i][1]&&(bbox[3]=geojson.coordinates[i][1]);break;case"Polygon":case"MultiLineString":for(bbox=[Infinity,Infinity,-Infinity,-Infinity],i=0;i<geojson.coordinates.length;i++)for(var j=0;j<geojson.coordinates[i].length;j++)bbox[0]>geojson.coordinates[i][j][0]&&(bbox[0]=geojson.coordinates[i][j][0]),bbox[1]>geojson.coordinates[i][j][1]&&(bbox[1]=geojson.coordinates[i][j][1]),bbox[2]<geojson.coordinates[i][j][0]&&(bbox[2]=geojson.coordinates[i][j][0]),bbox[3]<geojson.coordinates[i][j][1]&&(bbox[3]=geojson.coordinates[i][j][1]);break;case"MultiPolygon":for(bbox=[Infinity,Infinity,-Infinity,-Infinity],i=0;i<geojson.coordinates.length;i++)for(var j=0;j<geojson.coordinates[i].length;j++)for(var k=0;k<geojson.coordinates[i][j].length;k++)bbox[0]>geojson.coordinates[i][j][k][0]&&(bbox[0]=geojson.coordinates[i][j][k][0]),bbox[1]>geojson.coordinates[i][j][k][1]&&(bbox[1]=geojson.coordinates[i][j][k][1]),bbox[2]<geojson.coordinates[i][j][k][0]&&(bbox[2]=geojson.coordinates[i][j][k][0]),bbox[3]<geojson.coordinates[i][j][k][1]&&(bbox[3]=geojson.coordinates[i][j][k][1]);break;case"Feature":if(geojson.geometry!==null)switch(geojson.geometry.type){case"Point":bbox=[geojson.geometry.coordinates[0],geojson.geometry.coordinates[1],geojson.geometry.coordinates[0],geojson.geometry.coordinates[1]];break;case"LineString":case"MultiPoint":for(bbox=[Infinity,Infinity,-Infinity,-Infinity],i=0;i<geojson.geometry.coordinates.length;i++)bbox[0]>geojson.geometry.coordinates[i][0]&&(bbox[0]=geojson.geometry.coordinates[i][0]),bbox[1]>geojson.geometry.coordinates[i][1]&&(bbox[1]=geojson.geometry.coordinates[i][1]),bbox[2]<geojson.geometry.coordinates[i][0]&&(bbox[2]=geojson.geometry.coordinates[i][0]),bbox[3]<geojson.geometry.coordinates[i][1]&&(bbox[3]=geojson.geometry.coordinates[i][1]);break;case"Polygon":case"MultiLineString":for(bbox=[Infinity,Infinity,-Infinity,-Infinity],i=0;i<geojson.geometry.coordinates.length;i++)for(var j=0;j<geojson.geometry.coordinates[i].length;j++)bbox[0]>geojson.geometry.coordinates[i][j][0]&&(bbox[0]=geojson.geometry.coordinates[i][j][0]),bbox[1]>geojson.geometry.coordinates[i][j][1]&&(bbox[1]=geojson.geometry.coordinates[i][j][1]),bbox[2]<geojson.geometry.coordinates[i][j][0]&&(bbox[2]=geojson.geometry.coordinates[i][j][0]),bbox[3]<geojson.geometry.coordinates[i][j][1]&&(bbox[3]=geojson.geometry.coordinates[i][j][1]);break;case"MultiPolygon":for(bbox=[Infinity,Infinity,-Infinity,-Infinity],i=0;i<geojson.geometry.coordinates.length;i++)for(var j=0;j<geojson.geometry.coordinates[i].length;j++)for(var k=0;k<geojson.geometry.coordinates[i][j].length;k++)bbox[0]>geojson.geometry.coordinates[i][j][k][0]&&(bbox[0]=geojson.geometry.coordinates[i][j][k][0]),bbox[1]>geojson.geometry.coordinates[i][j][k][1]&&(bbox[1]=geojson.geometry.coordinates[i][j][k][1]),bbox[2]<geojson.geometry.coordinates[i][j][k][0]&&(bbox[2]=geojson.geometry.coordinates[i][j][k][0]),bbox[3]<geojson.geometry.coordinates[i][j][k][1]&&(bbox[3]=geojson.geometry.coordinates[i][j][k][1]);break;case"GeometryCollection":for(i=0;i<geojson.geometry.geometries.length;i++){var b=bbox(geojson.geometry.geometries[i]);bbox[0]>b[0]&&(bbox[0]=b[0]),bbox[1]>b[1]&&(bbox[1]=b[1]),bbox[2]<b[2]&&(bbox[2]=b[2]),bbox[3]<b[3]&&(bbox[3]=b[3])}}else postaction();break;case"FeatureCollection":for(i=0;i<geojson.features.length;i++){var b=bbox(geojson.features[i]);bbox[0]>b[0]&&(bbox[0]=b[0]),bbox[1]>b[1]&&(bbox[1]=b[1]),bbox[2]<b[2]&&(bbox[2]=b[2]),bbox[3]<b[3]&&(bbox[3]=b[3])};break;case"GeometryCollection":for(i=0;i<geojson.geometries.length;i++){var b=bbox(geojson.geometries[i]);bbox[0]>b[0]&&(bbox[0]=b[0]),bbox[1]>b[1]&&(bbox[1]=b[1]),bbox[2]<b[2]&&(bbox[2]=b[2]),bbox[3]<b[3]&&(bbox[3]=b[3])};break;default:postaction()}}return bbox},exports.feature=function(geom,properties,bbox,id){if(!geom)throw new Error("No geometry passed");var feat;switch(geom.type){case"Point":case"MultiPoint":case"LineString":case"MultiLineString":case"Polygon":case"MultiPolygon":case"GeometryCollection":feat={type:"Feature",geometry:geom,properties:properties||{}};break;default:throw new Error("Invalid geometry passed")}return id&&(feat.id=id),bbox&&(feat.bbox=bbox),feat},exports.convert=function(geojson,type){type=type||"Polygon";var i,j,k,rings,polygons;switch(type){case"Point":if(!Array.isArray(geojson))throw new Error("Invalid input must be an array");return point(geojson).geometry;case"LineString":if(!Array.isArray(geojson))throw new Error("Invalid input must be an array");for(i=0;i<geojson.length;i++){if(!Array.isArray(geojson[i]))throw new Error("Invalid input must be an array")}return{type:"LineString",coordinates:geojson};case"Polygon":if(!Array.isArray(geojson))throw new Error("Invalid input must be an array");for(rings=[],i=0;i<geojson.length;i++)if(rings.push([]),!Array.isArray(geojson[i]))throw new Error("Invalid input must be an array");for(i=0;i<geojson.length;i++)for(j=0;j<geojson[i].length;j++){if(!Array.isArray(geojson[i][j]))throw new Error("Invalid input must be an array");rings[i].push(geojson[i][j])}return{type:"Polygon",coordinates:rings};case"MultiPoint":if(!Array.isArray(geojson))throw new Error("Invalid input must be an array");for(i=0;i<geojson.length;i++){if(!Array.isArray(geojson[i]))throw new Error("Invalid input must be an array");if("number"!=typeof geojson[i][0]||"number"!=typeof geojson[i][1])throw new Error("Invalid input must be an array of positions")}return{type:"MultiPoint",coordinates:geojson};case"MultiLineString":if(!Array.isArray(geojson))throw new Error("Invalid input must be an array");for(i=0;i<geojson.length;i++)if(!Array.isArray(geojson[i]))throw new Error("Invalid input must be an array");for(i=0;i<geojson.length;i++)for(j=0;j<geojson[i].length;j++){if(!Array.isArray(geojson[i][j]))throw new Error("Invalid input must be an array")}return{type:"MultiLineString",coordinates:geojson};case"MultiPolygon":if(!Array.isArray(geojson))throw new Error("Invalid input must be an array");for(polygons=[],i=0;i<geojson.length;i++)if(polygons.push([]),!Array.isArray(geojson[i]))throw new Error("Invalid input must be an array");for(i=0;i<geojson.length;i++)for(j=0;j<geojson[i].length;j++)if(polygons[i].push([]),!Array.isArray(geojson[i][j]))throw new Error("Invalid input must be an array");for(i=0;i<geojson.length;i++)for(j=0;j<geojson[i].length;j++)for(k=0;k<geojson[i][j].length;k++){if(!Array.isArray(geojson[i][j][k]))throw new Error("Invalid input must be an array");polygons[i][j].push(geojson[i][j][k])}return{type:"MultiPolygon",coordinates:polygons}}throw new Error("Invalid type")},exports.polygon=function(coords,properties,bbox,id){if(!coords)throw new Error("No coordinates passed");for(var i=0;i<coords.length;i++)coords[i].length<4&&console.warn("a polygon contains a coordinate with only "+coords[i].length+" positions");return{type:"Feature",geometry:{type:"Polygon",coordinates:coords},properties:properties||{}}},exports.FEATURE=FEATURE,exports.FEATURES=FEATURES,exports.POINT=POINT,exports.POINTS="MultiPoint",exports.LINESTRING=LINESTRING,exports.MULTI_LINESTRING=MULTI_LINESTRING,exports.POLYGON=POLYGON,exports.MULTI_POLYGON=MULTI_POLYGON,exports.GEOMETRY_COLLECTION=GEOMETRY_COLLECTION,exports.DEGREES2RADIANS=DEGREES2RADIANS,exports.RADIANS2DEGREES=RADIANS2DEGREES,exports.UNITS=UNITS,exports.EARTH_RADIUS=EARTH_RADIUS},{}],4:[function(require,module,exports){"use strict";function getCoord(obj){if(!obj)throw new Error("obj is required");var coordinates=getCoords(obj);if(coordinates.length>1&&"number"==typeof coordinates[0]&&"number"==typeof coordinates[1])return coordinates;throw new Error("Coordinate is not a valid Point")}function getCoords(obj){if(!obj)throw new Error("obj is required");var coordinates;if(obj.length?coordinates=obj:obj.coordinates?coordinates=obj.coordinates:obj.geometry&&obj.geometry.coordinates&&(coordinates=obj.geometry.coordinates),coordinates)return coordinates;throw new Error("No valid coordinates")}function containsNumber(coordinates){if(coordinates.length>1&&"number"==typeof coordinates[0]&&"number"==typeof coordinates[1])return!0;if(Array.isArray(coordinates[0])&&coordinates[0].length)return containsNumber(coordinates[0]);throw new Error("coordinates must only contain numbers")}function getGeom(obj){if(!obj)throw new Error("obj is required");var geom;if(obj.geometry?geom=obj.geometry:obj.coordinates||obj.geometries?geom=obj:geom=obj,geom.geometries&&(geom=geom.geometries[0]),geom.coordinates)return geom;throw new Error("No valid geometry")}function getGeomType(){for(var geomType,i=0;i<arguments.length;i++){var g=arguments[i];if(!g)continue;if("string"==typeof g)return g;if("number"==typeof g||g.length)return"Point";if(g.coordinates&&"string"==typeof g.type)return g.type;if(g.geometry&&"string"==typeof g.geometry.type)return g.geometry.type;if(g.type||g.geometries||g.features||g.coordinates||g.geometry)if("string"==typeof g.type)geomType=g.type;else if(g.geometries){g.geometries.length&&(geomType=getGeomType(g.geometries[0]))}else if(g.features){g.features.length&&(geomType=getGeomType(g.features[0]))}else if(g.coordinates)if(g.coordinates.length)if(Array.isArray(g.coordinates[0])&&"number"==typeof g.coordinates[0][0]&&"number"==typeof g.coordinates[0][1])geomType="LineString";else if(Array.isArray(g.coordinates[0])&&Array.isArray(g.coordinates[0][0])&&"number"==typeof g.coordinates[0][0][0]&&"number"==typeof g.coordinates[0][0][1])geomType="Polygon";else{if(!Array.isArray(g.coordinates[0][0][0])||!Array.isArray(g.coordinates[0][0][0][0]))throw new Error("Unknown Coordinates Type");geomType="MultiPolygon"}else geomType="Point";else g.geometry&&(geomType=getGeomType(g.geometry))}return geomType}function getType(input,fallback){if(!input&&!fallback)throw new Error("type is required");return type=input,type||(type=fallback),type}Object.defineProperty(exports,"__esModule",{value:!0});var type;exports.getCoord=getCoord,exports.getCoords=getCoords,exports.containsNumber=containsNumber,exports.getGeom=getGeom,exports.getGeomType=getGeomType,exports.getType=getType},{}]},{},[1])(1)});
