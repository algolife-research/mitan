---
title: "PLACEHOLDER_NAME"
format: html
echo: false
warning: false
---

```{css, echo=FALSE}
div.bslib-column-wrap > div.html-fill-container:first-child {
  grid-column: span 2;
}
```

```{r}
source("./config.R")

map <- readRDS("./communes_results/87153_map.rds") 
df_cr <- read.csv("./communes_results/comm_summary_stats.csv", header = TRUE) %>%
  filter(comm_code == "87153")
df_cr_y <- read.csv("./communes_results/comm_summary_stats_year.csv", header = TRUE) %>%
  filter(comm_code == "87153")
```



## Cartographie forestière

<head>
    <meta charset="UTF-8">
    <title>Interactive Map with Time Series Chart</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/leaflet.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/leaflet.css" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
</head>
<body>
<div id="map" style="height: 500px;"></div>

<script>
// Initialize the map
var map = L.map('map').setView([37.8, -96], 4);

// Add address search bar
L.Control.geocoder({
    defaultMarkGeocode: false,
    placeholder: "Chercher une adresse...",
    collapsed: false
})
.on('markgeocode', function(e) {
    var latlng = e.geocode.center;
    map.setView(latlng, 12);
    L.marker(latlng).addTo(map)
        .bindPopup(e.geocode.name);
})
.addTo(map);

// Add base map layer
L.tileLayer(
    "https://data.geopf.fr/wmts?&REQUEST=GetTile&SERVICE=WMTS&VERSION=1.0.0&STYLE=normal&TILEMATRIXSET=PM&FORMAT=image/jpeg&LAYER=ORTHOIMAGERY.ORTHOPHOTOS&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}",
    {
        minZoom: 0,
        maxZoom: 18,
        attribution: "IGN-F/Geoportail",
        tileSize: 256
    }
).addTo(map);

// Custom Year Selector Control
L.Control.YearSelector = L.Control.extend({
    onAdd: function(map) {
        const div = L.DomUtil.create('div', 'year-selector');
        div.innerHTML = `
            <select multiple id="yearSelect" style="width: 200px;">
            </select>
        `;
        L.DomEvent.disableClickPropagation(div);
        return div;
    }
});

// Utility functions
async function loadGeoJSON(url) {
    const response = await fetch(url);
    return await response.json();
}

async function loadCSV(url) {
    const response = await fetch(url);
    const text = await response.text();
    const rows = text.trim().split("\n").map(row => row.split(","));
    const headers = rows[0];
    const data = {};

    rows.slice(1).forEach(row => {
        const id = row[0];
        const dates = headers.slice(1).map(h => h.replace("median.X", "").replace(/\./g, "-"));
        const values = row.slice(1).map(value => (value === "NA" ? null : parseFloat(value)));
        data[id] = { dates, values };
    });
    return data;
}

function getUniqueYears(geojsonData) {
    const years = new Set();
    geojsonData.features.forEach(feature => {
        if (feature.properties.year) {
            years.add(feature.properties.year);
        }
    });
    return Array.from(years).sort();
}

function createPopupContent(feature) {
    const patches = feature.properties.patches;
    const year = feature.properties.year;
    const start = feature.properties.start;
    const area_m2 = (feature.properties.area_m2/ 10000).toFixed(2);
    return `
        <div>
            <b>Perturbation Forestière</b><br><br>
            <b>Année :</b> ${year}<br>
            <b>Date de Début :</b> ${start}<br>
            <b>Surface (ha) :</b> ${area_m2}<br><br>
            <b>Evolution temporelle de la végétation</b><br>
        </div>
        <div>
        <canvas id="chart-${patches}" style="width:250px; height:150px;"></canvas>
        </div>
    `;
}

function getColor(type) {
    switch (type) {
        case 'Feuillus': return 'steelblue';
        case 'Conifères': return 'chocolate';
        case 'Autres / Mixtes': return 'forestgreen';
        default: return 'forestgreen';
    }
}

function style(feature) {
    return {
        fillColor: getColor(feature.properties.Type),
        weight: 0,
        fillOpacity: 0.4
    };
}

function highlightFeature(e) {
    e.target.setStyle({
        weight: 1,
        color: '#ffffff',
        fillOpacity: 0.7
    });
}

function resetHighlight(e, layer) {
    layer.resetStyle(e.target);
}

// Main map setup
(async function() {
    ['pane1', 'pane2', 'pane3'].forEach((pane, index) => {
        map.createPane(pane);
        map.getPane(pane).style.zIndex = 400 + (index * 100);
    });

    const aoiData = await loadGeoJSON('communes_results/87153_commune.geojson');
    const aoiLayer = L.geoJSON(aoiData, {
        style: {
            color: '#ffffff88',
            weight: 1,
            fillOpacity: 0
        },
        pane: "pane1"
    }).addTo(map);
    map.fitBounds(aoiLayer.getBounds());

    const bdfData = await loadGeoJSON('communes_results/87153_bdforet.geojson');
    const bdfLayer = L.geoJSON(bdfData, {
        style: style,
        onEachFeature: (feature, layer) => {
            const tfvG11 = feature.properties.TFV_G11;
            const essence = feature.properties.ESSENCE;
            const area = (feature.properties.area / 10000).toFixed(2);
            const popupContent = `
                <b>Zone Forestière</b><br><br>
                <b>Type :</b> ${tfvG11}<br>
                <b>Essence :</b> ${essence}<br>
                <b>Surface (ha) :</b> ${area}<br><br>
                Selon BDForêt V2.
            `;
            layer.bindPopup(popupContent);
            layer.on({
                mouseover: highlightFeature,
                mouseout: (e) => resetHighlight(e, bdfLayer)
            });
        },
        pane: "pane2"
    }).addTo(map);

    // CR Layer with Year Filtering
    const geojsonData = await loadGeoJSON('communes_results/87153_cr_mask_pr.geojson');
    const csvData = await loadCSV('communes_results/87153_ts.csv');
    const availableYears = getUniqueYears(geojsonData);
    let originalFeatures = geojsonData.features;

    const CR_layer = L.geoJSON(null, {
        style: {
            color: 'firebrick',
            weight: 1,
            opacity: 1,
            fillColor: 'firebrick',
            fillOpacity: 0.8
        },
        onEachFeature: (feature, layer) => {
            layer.on({
                mouseover: (e) => highlightFeature(e),
                mouseout: (e) => resetHighlight(e, CR_layer)
            });

            const id = feature.properties.patches;
            const timeSeriesData = csvData[id];
            
            if (timeSeriesData) {
                layer.bindPopup(createPopupContent(feature));
                layer.on('popupopen', function() {
                    const canvas = document.getElementById(`chart-${id}`);
                    if (canvas) {
                        const dates = timeSeriesData.dates.map(date => new Date(date.replace(/"/g, '') + '-01'));
                        const minDate = dates[0];
                        new Chart(canvas.getContext('2d'), {
                            type: 'line',
                            data: {
                                labels: dates,
                                datasets: [{
                                    label: 'Indice de Végétation',
                                    data: timeSeriesData.values,
                                    fill: false,
                                    borderColor: 'rgba(34, 139, 34, 1)',
                                    tension: 0.1
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                scales: {
                                    x: {
                                        type: 'time',
                                        time: {
                                            unit: 'month'
                                        },
                                        min: minDate,
                                        title: { display: false, text: 'Date' }
                                    },
                                    y: {
                                        type: 'linear',
                                        min: 0,
                                        max: 1,
                                        ticks: { stepSize: 0.2 },
                                        title: { display: true, text: 'Indice' }
                                    }
                                }
                            }
                        });
                    }
                });
            } else {
                layer.bindPopup('No data available for this region');
            }
        },
        pane: "pane3"
    }).addTo(map);

    function updateLayer(selectedYears) {
        CR_layer.clearLayers();
        const filteredFeatures = originalFeatures.filter(feature => 
            selectedYears.length === 0 || selectedYears.includes(feature.properties.year)
        );
        CR_layer.addData({
            type: "FeatureCollection",
            features: filteredFeatures
        });
    }

    const yearControl = new L.Control.YearSelector({ position: 'bottomleft' });
    yearControl.addTo(map);

    const $yearSelect = $('#yearSelect').select2({
        placeholder: "Selection des années",
        data: availableYears.map(year => ({ id: year, text: year })),
        width: '200px'
    });

    updateLayer([]);

    $yearSelect.on('change', function(e) {
        const selectedYears = $(this).val() || [];
        updateLayer(selectedYears);
    });

    var layerControl = L.control.layers(null, {
        "Perturbations": CR_layer,
        "BDForêt V2": bdfLayer
    }, { collapsed: false }).addTo(map);

    var layerControlContainer = layerControl.getContainer();
    var title = document.createElement("div");
    title.innerHTML = "<b>Couches</b>";
    title.style.textAlign = "left";
    title.style.padding = "0px";
    title.style.fontSize = "12px";
    title.style.backgroundColor = "white";
    layerControlContainer.insertBefore(title, layerControlContainer.firstChild);

    const legend = L.control({ position: 'bottomright' });
    legend.onAdd = function() {
        const div = L.DomUtil.create('div', 'info legend');
        div.style.backgroundColor = 'rgba(255, 255, 255, 0.5)';
        div.style.padding = '10px';
        div.style.borderRadius = '5px';
        div.style.boxShadow = '0 0 15px rgba(0, 0, 0, 0.2)';
        div.style.border = '1px solid rgba(0, 0, 0, 0.1)';
        const types = ['Feuillus', 'Conifères', 'Autres / Mixtes'];
        div.innerHTML = types.map(type =>
            `<i style="background:${getColor(type)}; width: 12px; height: 12px; display: inline-block;"></i> ${type}`
        ).join('<br>');
        return div;
    };
    legend.addTo(map);
})();
</script>

<style>
.year-selector {
    background: white;
    padding: 5px;
    border-radius: 3px;
    box-shadow: 0 0 15px rgba(0,0,0,0.2);
    position: absolute;
    bottom: 10px;
    left: 10px;
    z-index: 1000;
}
.select2-container--default .select2-selection--multiple {
    border: 1px solid #aaa;
}
</style>
</body>




------------------------------------------------------------------------

* __Période de suivi__ : `r df_cr$debut_suivi` - `r df_cr$fin_suivi`.

* __Cliquez__ sur une __zone forestière__ pour obtenir plus d'informations.

* Les __perturbations__ sont des changements majeurs dans un indice de végétation par rapport au même mois de l'année précédente.

* Elles sont principalement expliquées par des __coupes rases__.

------------------------------------------------------------------------



## La commune en bref

```{r}
layout_column_wrap(

  value_box(
    title = "Surface de la commune",
    value = paste0(round(df_cr$surface_comm), " ha"),
    br(),
    p(paste0("Dont forêt : ", round(df_cr$F_area), " ha")),
    p(paste0("Taux de boisement : ", round(100 * df_cr$taux_boisement), " %")),
    br(),
    showcase = bs_icon("map")
  ),
  
  value_box(
    title = "Surface totale de forêt",
    value = paste0(round(df_cr$F_area), " ha"),
    p("Dont :"),
    p(paste0("- feuillus : ", round(df_cr$F_area_fe), " ha")),
    p(paste0("- conifères : ", round(df_cr$F_area_co), " ha")),
    p(paste0("- mixtes, autres : ", round(df_cr$F_area_au), " ha")),
    showcase = bs_icon("tree")
  )
  
)

br()

layout_column_wrap(

  
  value_box(
    title = "Surface de forêt rasée depuis 2018",
    value = paste0(round(df_cr$CR_area), " ha"),
    p("En pourcentage :"),
    p(paste0("- de la forêt : ", round(df_cr$CR_pc, 2), " %")),
    p(paste0("- des feuillus : ", round(df_cr$CR_pc_fe, 2), " %")),
    p(paste0("- des conifères : ", round(df_cr$CR_pc_co, 2), " %")),
    showcase = bs_icon("scissors")
  ),

  value_box(
    title = "Surface de forêt rasée par an",
    value = paste0(round(df_cr$CR_area_py), " ha par an"),
    p("En pourcentage :"),
    p(paste0("- de la forêt : ", round(df_cr$CR_pc_py, 2), " %")),
    p(paste0("- des feuillus : ", round(df_cr$CR_pc_py_fe, 2), " %")),
    p(paste0("- des conifères : ", round(df_cr$CR_pc_py_co, 2), " %")),
    showcase = bs_icon("calendar", class = "icons")
  )

)
```

```{r}
df_per_year <- df_cr_y %>%
  mutate(year = as.factor(year)) %>%
  mutate(surface = round(surface, 3))

# Create interactive stacked bar chart with rounded edges
fig <- plot_ly(height = 250,
               df_per_year, 
               x = ~year, 
               y = ~surface, 
               color = ~Type, 
               type = 'bar', 
               text = ~paste("Surface :", surface, "ha"),
               textposition = "none",
               hoverinfo = 'text',
               colors = c("forestgreen", "chocolate", "steelblue"),
               marker = list(line = list(width = 1, color = "white"),
                             opacity = 0.9,
                             pattern = list(shape = ""))
               ) %>% 
  layout(
    title = list(text = "🌿 Surface de forêt coupée par an", x = 0.5, font = list(size = 18)),
    xaxis = list(title = "Année", tickangle = -45, showgrid = FALSE, zeroline = FALSE),
    yaxis = list(title = "Surface (hectares)", showgrid = FALSE, zeroline = FALSE),
    barmode = "relative",  # Ensures a stacked look
    plot_bgcolor = "rgba(0,0,0,0)",  # Transparent background
    paper_bgcolor = "rgba(0,0,0,0)",  # Transparent paper
    showlegend = TRUE
  ) %>%
  config(displayModeBar = FALSE)

# Display the figure
br()
fig
```



## Et si on continuait à ce rythme ?


```{r}
# layout_column_wrap(
# 
#   value_box(
#     title = "Durée estimée du cycle de la forêt",
#     value = paste0(round(df_cr$cycle_y), " années"),
#     p(paste0("Soit ", round(df_cr$time_left), " restantes !")),
#     p("Espérance de vie d'un chêne : > 500 ans."),
#     showcase = bs_icon("hourglass-split")
#   )
# 
# )
```


```{r out-height:100px}
pc <- df_cr$CR_pc
cr_rate <- df_cr$CR_pc_py
yf <- 40
pc_20 <- pc + cr_rate * 20
if(pc_20 > 100) pc_20 <- 100
nw_50 <- cr_rate * ((50 + df_cr$suivi_y) - yf)
pc_50 <- pc + cr_rate * 50 - nw_50
if(pc_50 > 100) pc_50 <- 100

data <- dplyr::tibble(
  category = rep(c("Aujourd'hui", "Dans 20 ans", "Dans 50 ans"), each = 3),
  group = rep(c("Forêt vivante", "Forêt rasée", "Jeune Forêt (+ de 40 ans)"), 3),
  value = c(100 - pc, pc, 0, 100 - pc_20, pc_20, 0, 100 - pc_50 - nw_50, pc_50, nw_50)
)

data$value[data$value < 0] <- 0
data$value <- round(data$value, 2)

hovertmp <- ~paste("Type :", group, "<br>Valeur :", value, " %")

fig <- plot_ly(height = 180) %>%

  add_trace(data = subset(data, group == "Jeune Forêt (+ de 40 ans)"),
            x = ~value, y = ~category, type = 'bar', orientation = 'h',
            marker = list(color = '#b7d693'),
            name = "Jeune Forêt (+ de 40 ans)",
            name = "Jeune Forêt",
            hovertemplate = hovertmp) %>%
  
  add_trace(data = subset(data, group == "Forêt rasée"),
            x = ~value, y = ~category, type = 'bar', orientation = 'h',
            marker = list(
              color = '#ff0f0f',
              pattern = list(
                bgcolor = "#b7d693",
                shape = "x",
                solidity = 0.2,
                size = 4
              )
            ),
            name = "Forêt rasée",
            hovertemplate = hovertmp) %>%
  
  add_trace(data = subset(data, group == "Forêt vivante"),
            x = ~value, y = ~category, type = 'bar', orientation = 'h',
            marker = list(color = '#6a994e'),
            name = "Forêt vivante",
            hovertemplate = hovertmp) %>%
  
  layout(
    barmode = 'stack', 
    xaxis = list(title = "", showticklabels = FALSE, zeroline = FALSE),
    yaxis = list(title = "", categoryorder = "array",
              categoryarray = c("Dans 50 ans", "Dans 20 ans", "Aujourd'hui")),
    legend = list(title = list(text = 'Type de Forêt')),
    height = 150,
    width = "100%"
  ) %>%
  config(displayModeBar = FALSE)

fig

```

## A savoir

Comme pour toutes les données, il est important de connaître leurs limites afin de mieux comprendre ce qu'elles peuvent vraiment nous révéler.

Nous vous invitons à consulter la page [Détails](details.html) pour en apprendre plus sur les limites de la classification des types de forêts ainsi que de la détection des perturbations.


### Nos recommandations

Il est toujours judicieux de vérifier les données sur plusieurs sites, notamment dans des communes aux caractéristiques environnementales différentes de celles où le modèle a été conçu.

Bien qu'elles offrent une vision globale intéressante, ces données doivent toujours être complétées par une validation manuelle pour plus de précision.

## Source des données

-   **Annotation des forêts**: [BDForêt® V2](https://geoservices.ign.fr/bdforet) sous [Licence ETALAB-Licence-Ouverte-v2.0](https://www.etalab.gouv.fr/wp-content/uploads/2017/04/ETALAB-Licence-Ouverte-v2.0.pdf)

-   **Altitudes**: [Service Géoplateforme de calcul altimétrique](https://geoservices.ign.fr/services-geoplateforme-altimetrie) sous [Licence ETALAB-Licence-Ouverte-v2.0](https://www.etalab.gouv.fr/wp-content/uploads/2017/04/ETALAB-Licence-Ouverte-v2.0.pdf)

-   **Données satellite**: Copernicus ([satellite Sentinel 2](https://sentiwiki.copernicus.eu/web/s2-mission)) obtenues par [Sentinel-Hub](https://www.sentinel-hub.com/), sous [Licence CC-BY-SA](https://creativecommons.org/licenses/by/4.0/deed.fr)

-   **Fond de carte**: IGN-F/Geoportail.

-   **Perturbations et calculs associés** - Algorithme maison sous [Licence CC-BY-SA](https://creativecommons.org/licenses/by-sa/4.0/deed.fr)

